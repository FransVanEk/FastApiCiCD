name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          DIGITALOCEAN_USERNAME: ${{ github.actor }}  # Placeholder, DigitalOcean only requires the token for now we take the github username
        run: |
          echo "${DIGITALOCEAN_ACCESS_TOKEN}" | docker login registry.digitalocean.com -u "${DIGITALOCEAN_USERNAME}" --password-stdin

      # Build Docker Image
      - name: Build Docker image
        run: |
          docker build -t registry.digitalocean.com/devops-cicd/fast-api:latest .

      # Push Docker Image
      - name: Push Docker image to DigitalOcean
        run: |
          docker push registry.digitalocean.com/devops-cicd/fast-api:latest

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Terraform Init
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Terraform Plan with Variables Passed In
      - name: Terraform Plan
        id: plan
        working-directory: terraform
        env:
          DO_TOKEN: ${{ secrets.DO_TOKEN }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}
        run: |
          terraform plan -out=tfplan \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="docker_username=${{ secrets.DOCKER_USERNAME }}" \
            -var="docker_email=${{ secrets.DOCKER_EMAIL }}" \
            -var="region=ams3" \
            -var="cluster_name=my-devops-cluster2" \
            -var="node_count=2" \
            -var="namespace=ns-website-db" \
            -var="db_name=my_database" \
            -var="db_user=db_user" \
            -var="docker_server=registry.digitalocean.com"

      # Check for Changes
        
      - name: Check for changes
        id: check_changes
        working-directory: terraform
        run: |
          HAS_CHANGES=$(terraform show -json tfplan | jq '.resource_changes | length')
          if [ "$HAS_CHANGES" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "has_changes=false" >> $GITHUB_ENV
          fi

          # Terraform Apply if there are changes
      - name: Terraform Apply
        if: steps.check_changes.outputs.has_changes == '1'
        working-directory: terraform
        env:
          DO_TOKEN: ${{ secrets.DO_TOKEN }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}
        run: |
          terraform apply -auto-approve tfplan \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="docker_username=${{ secrets.DOCKER_USERNAME }}" \
            -var="docker_email=${{ secrets.DOCKER_EMAIL }}" \
            -var="region=ams3" \
            -var="cluster_name=my-devops-cluster2" \
            -var="node_count=2" \
            -var="namespace=ns-website-db" \
            -var="db_name=my_database" \
            -var="db_user=db_user" \
            -var="docker_server=registry.digitalocean.com"

      # Cleanup plan file
      - name: Cleanup
        if: steps.check_changes.outputs.has_changes == '1'
        working-directory: terraform
        run: rm tfplan