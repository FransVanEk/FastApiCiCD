{
  "version": 4,
  "terraform_version": "1.9.8",
  "serial": 143,
  "lineage": "92dfd393-7ca3-7be9-1a43-b2c0aa46017e",
  "outputs": {
    "kubeconfig": {
      "value": "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lDQm5Vd0RRWUpLb1pJaHZjTkFRRUxCUUF3TXpFVk1CTUdBMVVFQ2hNTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dBWURWUVFERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHlOREV4TWpBeApNelEyTXpsYUZ3MDBOREV4TWpBeE16UTJNemxhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFEZGx6ait6b0U4b2s4MTR6TXpsejk5U284M3FnYi9XWEdTNklPOTN2eXhKTW9Bc3ZZeQpyU3B0TTFnc0hxT1JpZ0h0RDNXQ1JJbTN0VThSdW1tMXpZeXFiUGVRemJJU1NUQW1yM1UzWUYrV2ZKSUJsYitTCkR6SFNvVHpxNy8xMm5DSVUrbWV4RDkxUHN2QnNiKyt5bStBYU5zWlArWjJIbU43VXF0OTRWcFEwMmY4Lzl2NE4KSnV2UytJMTh6aGxDRDk4NFRtYXdVQ0I0L0YyMUJwVkpRT05mZVZhekFsQnFpM3RiZG1jaytpbFRtK2ZhM0Q4bwpGcjVMY0M0NFRRYm0vNVJjWlNHbWFud1ZoMDFVWGwwVXpDV3ZDYzhpZDkzSDRwOVM0SzBVbmtJZ0RIaXVMMCsrClFrMnNoVjNoQTdDOHJpdFpVWFcyK1RXMThOQjdtUTJyMU5tL0FnTUJBQUdqUlRCRE1BNEdBMVVkRHdFQi93UUUKQXdJQmhqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQjBHQTFVZERnUVdCQlFSQUsxbmNjVjBUZlhCdWh5aQpoei8zOC9rbFpqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFXam02enllWExFK0ZZVEFoOTZmSzNMc3RLV1hrCjZha3kyV0pETnM5YU54bGF1QXlURjYrWXFuNDIzMmlCUDFicGJjU1J3M1FoMVN5TWxwQTM2b01LTWp6NnFFYy8KTFFGMmR2K2c2MEhEd21xZ3puN0MybWx4T29JSnVMNnV4ZVNBaVRKVjRadXVUWS9pZGNVSVBPcDhDUy9oazY0dgpSdXlzbnBvRDRRZ1FCS2t5VGlXOFNhM0FZSXZtYzlEYlNkSFBJd3phcEhWaHVVaWgvYUVtN1d3eG91VFBwZDZDCnZSRzhqTE9ZQ2g5TGFPYUFqbmpzTzJUaFlJMTF3cWFqTFpMZlpmRU5ENlBHYlUwYjZ0c1p1OUJQMzBYcEFVSkIKci9pV284TU5KcUdia3J4SGdvdHpESXN4cTZITlBHMXRWT2czcWNmK1hVV2VpRGlUYjRxM0hNQ2lPUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n    server: https://bcff0265-5b0f-47c5-92e7-ba5444e71ddd.k8s.ondigitalocean.com\n  name: do-ams3-my-devops-cluster2\ncontexts:\n- context:\n    cluster: do-ams3-my-devops-cluster2\n    user: do-ams3-my-devops-cluster2-admin\n  name: do-ams3-my-devops-cluster2\ncurrent-context: do-ams3-my-devops-cluster2\nusers:\n- name: do-ams3-my-devops-cluster2-admin\n  user:\n    token: dop_v1_dd631e04c1af45b7dd8e8f85d08f1b7850c857f7baaca211f2cc06ac994b3dc1\n",
      "type": "string",
      "sensitive": true
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "digitalocean_kubernetes_cluster",
      "name": "my-devops-cluster2",
      "provider": "provider[\"registry.terraform.io/digitalocean/digitalocean\"]",
      "instances": [
        {
          "schema_version": 3,
          "attributes": {
            "auto_upgrade": false,
            "cluster_subnet": "10.244.0.0/16",
            "created_at": "2024-11-20 13:46:36 +0000 UTC",
            "destroy_all_associated_resources": false,
            "endpoint": "https://bcff0265-5b0f-47c5-92e7-ba5444e71ddd.k8s.ondigitalocean.com",
            "ha": false,
            "id": "bcff0265-5b0f-47c5-92e7-ba5444e71ddd",
            "ipv4_address": "",
            "kube_config": [
              {
                "client_certificate": "",
                "client_key": "",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lDQm5Vd0RRWUpLb1pJaHZjTkFRRUxCUUF3TXpFVk1CTUdBMVVFQ2hNTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dBWURWUVFERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHlOREV4TWpBeApNelEyTXpsYUZ3MDBOREV4TWpBeE16UTJNemxhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFEZGx6ait6b0U4b2s4MTR6TXpsejk5U284M3FnYi9XWEdTNklPOTN2eXhKTW9Bc3ZZeQpyU3B0TTFnc0hxT1JpZ0h0RDNXQ1JJbTN0VThSdW1tMXpZeXFiUGVRemJJU1NUQW1yM1UzWUYrV2ZKSUJsYitTCkR6SFNvVHpxNy8xMm5DSVUrbWV4RDkxUHN2QnNiKyt5bStBYU5zWlArWjJIbU43VXF0OTRWcFEwMmY4Lzl2NE4KSnV2UytJMTh6aGxDRDk4NFRtYXdVQ0I0L0YyMUJwVkpRT05mZVZhekFsQnFpM3RiZG1jaytpbFRtK2ZhM0Q4bwpGcjVMY0M0NFRRYm0vNVJjWlNHbWFud1ZoMDFVWGwwVXpDV3ZDYzhpZDkzSDRwOVM0SzBVbmtJZ0RIaXVMMCsrClFrMnNoVjNoQTdDOHJpdFpVWFcyK1RXMThOQjdtUTJyMU5tL0FnTUJBQUdqUlRCRE1BNEdBMVVkRHdFQi93UUUKQXdJQmhqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQjBHQTFVZERnUVdCQlFSQUsxbmNjVjBUZlhCdWh5aQpoei8zOC9rbFpqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFXam02enllWExFK0ZZVEFoOTZmSzNMc3RLV1hrCjZha3kyV0pETnM5YU54bGF1QXlURjYrWXFuNDIzMmlCUDFicGJjU1J3M1FoMVN5TWxwQTM2b01LTWp6NnFFYy8KTFFGMmR2K2c2MEhEd21xZ3puN0MybWx4T29JSnVMNnV4ZVNBaVRKVjRadXVUWS9pZGNVSVBPcDhDUy9oazY0dgpSdXlzbnBvRDRRZ1FCS2t5VGlXOFNhM0FZSXZtYzlEYlNkSFBJd3phcEhWaHVVaWgvYUVtN1d3eG91VFBwZDZDCnZSRzhqTE9ZQ2g5TGFPYUFqbmpzTzJUaFlJMTF3cWFqTFpMZlpmRU5ENlBHYlUwYjZ0c1p1OUJQMzBYcEFVSkIKci9pV284TU5KcUdia3J4SGdvdHpESXN4cTZITlBHMXRWT2czcWNmK1hVV2VpRGlUYjRxM0hNQ2lPUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                "expires_at": "2024-11-27T13:51:26Z",
                "host": "https://bcff0265-5b0f-47c5-92e7-ba5444e71ddd.k8s.ondigitalocean.com",
                "raw_config": "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lDQm5Vd0RRWUpLb1pJaHZjTkFRRUxCUUF3TXpFVk1CTUdBMVVFQ2hNTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dBWURWUVFERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHlOREV4TWpBeApNelEyTXpsYUZ3MDBOREV4TWpBeE16UTJNemxhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFEZGx6ait6b0U4b2s4MTR6TXpsejk5U284M3FnYi9XWEdTNklPOTN2eXhKTW9Bc3ZZeQpyU3B0TTFnc0hxT1JpZ0h0RDNXQ1JJbTN0VThSdW1tMXpZeXFiUGVRemJJU1NUQW1yM1UzWUYrV2ZKSUJsYitTCkR6SFNvVHpxNy8xMm5DSVUrbWV4RDkxUHN2QnNiKyt5bStBYU5zWlArWjJIbU43VXF0OTRWcFEwMmY4Lzl2NE4KSnV2UytJMTh6aGxDRDk4NFRtYXdVQ0I0L0YyMUJwVkpRT05mZVZhekFsQnFpM3RiZG1jaytpbFRtK2ZhM0Q4bwpGcjVMY0M0NFRRYm0vNVJjWlNHbWFud1ZoMDFVWGwwVXpDV3ZDYzhpZDkzSDRwOVM0SzBVbmtJZ0RIaXVMMCsrClFrMnNoVjNoQTdDOHJpdFpVWFcyK1RXMThOQjdtUTJyMU5tL0FnTUJBQUdqUlRCRE1BNEdBMVVkRHdFQi93UUUKQXdJQmhqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQjBHQTFVZERnUVdCQlFSQUsxbmNjVjBUZlhCdWh5aQpoei8zOC9rbFpqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFXam02enllWExFK0ZZVEFoOTZmSzNMc3RLV1hrCjZha3kyV0pETnM5YU54bGF1QXlURjYrWXFuNDIzMmlCUDFicGJjU1J3M1FoMVN5TWxwQTM2b01LTWp6NnFFYy8KTFFGMmR2K2c2MEhEd21xZ3puN0MybWx4T29JSnVMNnV4ZVNBaVRKVjRadXVUWS9pZGNVSVBPcDhDUy9oazY0dgpSdXlzbnBvRDRRZ1FCS2t5VGlXOFNhM0FZSXZtYzlEYlNkSFBJd3phcEhWaHVVaWgvYUVtN1d3eG91VFBwZDZDCnZSRzhqTE9ZQ2g5TGFPYUFqbmpzTzJUaFlJMTF3cWFqTFpMZlpmRU5ENlBHYlUwYjZ0c1p1OUJQMzBYcEFVSkIKci9pV284TU5KcUdia3J4SGdvdHpESXN4cTZITlBHMXRWT2czcWNmK1hVV2VpRGlUYjRxM0hNQ2lPUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n    server: https://bcff0265-5b0f-47c5-92e7-ba5444e71ddd.k8s.ondigitalocean.com\n  name: do-ams3-my-devops-cluster2\ncontexts:\n- context:\n    cluster: do-ams3-my-devops-cluster2\n    user: do-ams3-my-devops-cluster2-admin\n  name: do-ams3-my-devops-cluster2\ncurrent-context: do-ams3-my-devops-cluster2\nusers:\n- name: do-ams3-my-devops-cluster2-admin\n  user:\n    token: dop_v1_dd631e04c1af45b7dd8e8f85d08f1b7850c857f7baaca211f2cc06ac994b3dc1\n",
                "token": "dop_v1_dd631e04c1af45b7dd8e8f85d08f1b7850c857f7baaca211f2cc06ac994b3dc1"
              }
            ],
            "maintenance_policy": [
              {
                "day": "any",
                "duration": "4h0m0s",
                "start_time": "20:00"
              }
            ],
            "name": "my-devops-cluster2",
            "node_pool": [
              {
                "actual_node_count": 2,
                "auto_scale": false,
                "id": "aed2762e-e024-4216-ab16-96db094c2fc3",
                "labels": null,
                "max_nodes": 0,
                "min_nodes": 0,
                "name": "website-with-db",
                "node_count": 2,
                "nodes": [
                  {
                    "created_at": "2024-11-20 13:46:36 +0000 UTC",
                    "droplet_id": "458878418",
                    "id": "5930bcd9-784b-4d09-8e10-fc1dc2f6f9be",
                    "name": "website-with-db-ggeor",
                    "status": "running",
                    "updated_at": "2024-11-20 13:49:21 +0000 UTC"
                  },
                  {
                    "created_at": "2024-11-20 13:46:36 +0000 UTC",
                    "droplet_id": "458878419",
                    "id": "1cc7566f-a346-4937-a001-ccb55dbc0f1c",
                    "name": "website-with-db-ggeob",
                    "status": "running",
                    "updated_at": "2024-11-20 13:49:21 +0000 UTC"
                  }
                ],
                "size": "s-1vcpu-2gb",
                "tags": null,
                "taint": []
              }
            ],
            "region": "ams3",
            "registry_integration": false,
            "service_subnet": "10.245.0.0/16",
            "status": "running",
            "surge_upgrade": true,
            "tags": null,
            "timeouts": null,
            "updated_at": "2024-11-20 13:51:21 +0000 UTC",
            "urn": "do:kubernetes:bcff0265-5b0f-47c5-92e7-ba5444e71ddd",
            "version": "1.31.1-do.4",
            "vpc_uuid": "5b6ff2de-6d7e-43cd-829a-7d7195ec23f1"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "kube_config"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIzIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "prometheus",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "prometheus",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.71.2",
                "chart": "kube-prometheus-stack",
                "first_deployed": 1732110700,
                "last_deployed": 1732110700,
                "name": "prometheus",
                "namespace": "monitoring",
                "notes": "kube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, prometheus-kube-state-metrics.monitoring.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\n1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace monitoring prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   prometheus-grafana.monitoring.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace monitoring port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace monitoring $POD_NAME 9100\nkube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace monitoring get pods -l \"release=prometheus\"\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n",
                "revision": 1,
                "values": "{\"alertRelabelConfigs\":{},\"alertmanager\":{\"enabled\":true,\"persistence\":{\"size\":\"2Gi\"},\"podSecurityContext\":{\"fsGroup\":65534,\"runAsGroup\":65534,\"runAsNonRoot\":true,\"runAsUser\":65534}},\"configmapReload\":{\"prometheus\":{\"containerSecurityContext\":{},\"enabled\":true,\"extraArgs\":{},\"extraConfigmapMounts\":[],\"extraVolumeDirs\":[],\"image\":{\"digest\":\"\",\"pullPolicy\":\"IfNotPresent\",\"repository\":\"jimmidyson/configmap-reload\",\"tag\":\"v0.8.0\"},\"name\":\"configmap-reload\",\"resources\":{}}},\"extraManifests\":[],\"extraScrapeConfigs\":\"\",\"forceNamespace\":\"\",\"imagePullSecrets\":[],\"kube-state-metrics\":{\"enabled\":true},\"networkPolicy\":{\"enabled\":false},\"podSecurityPolicy\":{\"enabled\":true},\"prometheus-node-exporter\":{\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false},\"enabled\":true,\"rbac\":{\"pspEnabled\":false}},\"prometheus-pushgateway\":{\"enabled\":true,\"serviceAnnotations\":{\"prometheus.io/probe\":\"pushgateway\"}},\"prometheusOperator\":{\"createCustomResource\":true},\"rbac\":{\"create\":true},\"ruleFiles\":{},\"server\":{\"affinity\":{},\"alertmanagers\":[],\"baseURL\":\"\",\"configMapOverrideName\":\"\",\"configPath\":\"/etc/config/prometheus.yml\",\"containerSecurityContext\":{},\"defaultFlagsOverride\":[],\"deploymentAnnotations\":{},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"emptyDir\":{\"sizeLimit\":\"\"},\"enableServiceLinks\":true,\"env\":[],\"extraArgs\":{},\"extraConfigmapLabels\":{},\"extraConfigmapMounts\":[],\"extraFlags\":[\"web.enable-lifecycle\"],\"extraHostPathMounts\":[],\"extraInitContainers\":[],\"extraSecretMounts\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"global\":{\"evaluation_interval\":\"1m\",\"scrape_interval\":\"1m\",\"scrape_timeout\":\"10s\"},\"hostAliases\":[],\"hostNetwork\":false,\"image\":{\"digest\":\"\",\"pullPolicy\":\"IfNotPresent\",\"repository\":\"quay.io/prometheus/prometheus\",\"tag\":\"\"},\"ingress\":{\"annotations\":{},\"enabled\":false,\"extraLabels\":{},\"extraPaths\":[],\"hosts\":[],\"path\":\"/\",\"pathType\":\"Prefix\",\"tls\":[]},\"livenessProbeFailureThreshold\":3,\"livenessProbeInitialDelay\":30,\"livenessProbePeriodSeconds\":15,\"livenessProbeSuccessThreshold\":1,\"livenessProbeTimeout\":10,\"name\":\"server\",\"nodeSelector\":{},\"persistentVolume\":{\"accessModes\":[\"ReadWriteOnce\"],\"annotations\":{},\"enabled\":false,\"existingClaim\":\"\",\"labels\":{},\"mountPath\":\"/data\",\"size\":\"8Gi\",\"subPath\":\"\"},\"podAnnotations\":{},\"podDisruptionBudget\":{\"enabled\":false,\"maxUnavailable\":1},\"podLabels\":{},\"podSecurityPolicy\":{\"annotations\":{}},\"prefixURL\":\"\",\"priorityClassName\":\"\",\"probeHeaders\":[],\"probeScheme\":\"HTTP\",\"readinessProbeFailureThreshold\":3,\"readinessProbeInitialDelay\":30,\"readinessProbePeriodSeconds\":5,\"readinessProbeSuccessThreshold\":1,\"readinessProbeTimeout\":4,\"remoteRead\":[],\"remoteWrite\":[],\"replicaCount\":1,\"resources\":{},\"retention\":\"15d\",\"securityContext\":{\"fsGroup\":65534,\"runAsGroup\":65534,\"runAsNonRoot\":true,\"runAsUser\":65534},\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"enabled\":true,\"externalIPs\":[],\"gRPC\":{\"enabled\":false,\"servicePort\":10901},\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"servicePort\":80,\"sessionAffinity\":\"None\",\"statefulsetReplica\":{\"enabled\":false,\"replica\":0},\"type\":\"ClusterIP\"},\"sidecarContainers\":{},\"sidecarTemplateValues\":{},\"startupProbe\":{\"enabled\":false,\"failureThreshold\":30,\"periodSeconds\":5,\"timeoutSeconds\":10},\"statefulSet\":{\"annotations\":{},\"enabled\":false,\"headless\":{\"annotations\":{},\"gRPC\":{\"enabled\":false,\"servicePort\":10901},\"labels\":{},\"servicePort\":80},\"labels\":{},\"podManagementPolicy\":\"OrderedReady\"},\"storagePath\":\"\",\"strategy\":{\"type\":\"Recreate\"},\"tcpSocketProbeEnabled\":false,\"terminationGracePeriodSeconds\":300,\"tolerations\":[],\"verticalAutoscaler\":{\"enabled\":false}},\"server.resources\":\"\\\"limits\\\":\\n  \\\"cpu\\\": \\\"200m\\\"\\n  \\\"memory\\\": \\\"50Mi\\\"\\n\\\"requests\\\":\\n  \\\"cpu\\\": \\\"100m\\\"\\n  \\\"memory\\\": \\\"30Mi\\\"\\n\",\"serverFiles\":{\"alerting_rules.yml\":{},\"alerts\":{},\"prometheus.yml\":{\"rule_files\":[\"/etc/config/recording_rules.yml\",\"/etc/config/alerting_rules.yml\",\"/etc/config/rules\",\"/etc/config/alerts\"],\"scrape_configs\":[{\"job_name\":\"prometheus\",\"static_configs\":[{\"targets\":[\"localhost:9090\"]}]},{\"bearer_token_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"job_name\":\"kubernetes-apiservers\",\"kubernetes_sd_configs\":[{\"role\":\"endpoints\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":\"default;kubernetes;https\",\"source_labels\":[\"__meta_kubernetes_namespace\",\"__meta_kubernetes_service_name\",\"__meta_kubernetes_endpoint_port_name\"]}],\"scheme\":\"https\",\"tls_config\":{\"ca_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\"insecure_skip_verify\":true}},{\"bearer_token_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"job_name\":\"kubernetes-nodes\",\"kubernetes_sd_configs\":[{\"role\":\"node\"}],\"relabel_configs\":[{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_node_label_(.+)\"},{\"replacement\":\"kubernetes.default.svc:443\",\"target_label\":\"__address__\"},{\"regex\":\"(.+)\",\"replacement\":\"/api/v1/nodes/$1/proxy/metrics\",\"source_labels\":[\"__meta_kubernetes_node_name\"],\"target_label\":\"__metrics_path__\"}],\"scheme\":\"https\",\"tls_config\":{\"ca_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\"insecure_skip_verify\":true}},{\"bearer_token_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"job_name\":\"kubernetes-nodes-cadvisor\",\"kubernetes_sd_configs\":[{\"role\":\"node\"}],\"relabel_configs\":[{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_node_label_(.+)\"},{\"replacement\":\"kubernetes.default.svc:443\",\"target_label\":\"__address__\"},{\"regex\":\"(.+)\",\"replacement\":\"/api/v1/nodes/$1/proxy/metrics/cadvisor\",\"source_labels\":[\"__meta_kubernetes_node_name\"],\"target_label\":\"__metrics_path__\"}],\"scheme\":\"https\",\"tls_config\":{\"ca_file\":\"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\"insecure_skip_verify\":true}},{\"honor_labels\":true,\"job_name\":\"kubernetes-service-endpoints\",\"kubernetes_sd_configs\":[{\"role\":\"endpoints\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_scrape\"]},{\"action\":\"drop\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_scrape_slow\"]},{\"action\":\"replace\",\"regex\":\"(https?)\",\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_scheme\"],\"target_label\":\"__scheme__\"},{\"action\":\"replace\",\"regex\":\"(.+)\",\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_path\"],\"target_label\":\"__metrics_path__\"},{\"action\":\"replace\",\"regex\":\"(.+?)(?::\\\\d+)?;(\\\\d+)\",\"replacement\":\"$1:$2\",\"source_labels\":[\"__address__\",\"__meta_kubernetes_service_annotation_prometheus_io_port\"],\"target_label\":\"__address__\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_service_annotation_prometheus_io_param_(.+)\",\"replacement\":\"__param_$1\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_service_label_(.+)\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_namespace\"],\"target_label\":\"namespace\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_service_name\"],\"target_label\":\"service\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_pod_node_name\"],\"target_label\":\"node\"}]},{\"honor_labels\":true,\"job_name\":\"kubernetes-service-endpoints-slow\",\"kubernetes_sd_configs\":[{\"role\":\"endpoints\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_scrape_slow\"]},{\"action\":\"replace\",\"regex\":\"(https?)\",\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_scheme\"],\"target_label\":\"__scheme__\"},{\"action\":\"replace\",\"regex\":\"(.+)\",\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_path\"],\"target_label\":\"__metrics_path__\"},{\"action\":\"replace\",\"regex\":\"(.+?)(?::\\\\d+)?;(\\\\d+)\",\"replacement\":\"$1:$2\",\"source_labels\":[\"__address__\",\"__meta_kubernetes_service_annotation_prometheus_io_port\"],\"target_label\":\"__address__\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_service_annotation_prometheus_io_param_(.+)\",\"replacement\":\"__param_$1\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_service_label_(.+)\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_namespace\"],\"target_label\":\"namespace\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_service_name\"],\"target_label\":\"service\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_pod_node_name\"],\"target_label\":\"node\"}],\"scrape_interval\":\"5m\",\"scrape_timeout\":\"30s\"},{\"honor_labels\":true,\"job_name\":\"prometheus-pushgateway\",\"kubernetes_sd_configs\":[{\"role\":\"service\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":\"pushgateway\",\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_probe\"]}]},{\"honor_labels\":true,\"job_name\":\"kubernetes-services\",\"kubernetes_sd_configs\":[{\"role\":\"service\"}],\"metrics_path\":\"/probe\",\"params\":{\"module\":[\"http_2xx\"]},\"relabel_configs\":[{\"action\":\"keep\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_service_annotation_prometheus_io_probe\"]},{\"source_labels\":[\"__address__\"],\"target_label\":\"__param_target\"},{\"replacement\":\"blackbox\",\"target_label\":\"__address__\"},{\"source_labels\":[\"__param_target\"],\"target_label\":\"instance\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_service_label_(.+)\"},{\"source_labels\":[\"__meta_kubernetes_namespace\"],\"target_label\":\"namespace\"},{\"source_labels\":[\"__meta_kubernetes_service_name\"],\"target_label\":\"service\"}]},{\"honor_labels\":true,\"job_name\":\"kubernetes-pods\",\"kubernetes_sd_configs\":[{\"role\":\"pod\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_scrape\"]},{\"action\":\"drop\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow\"]},{\"action\":\"replace\",\"regex\":\"(https?)\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_scheme\"],\"target_label\":\"__scheme__\"},{\"action\":\"replace\",\"regex\":\"(.+)\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_path\"],\"target_label\":\"__metrics_path__\"},{\"action\":\"replace\",\"regex\":\"(\\\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\",\"replacement\":\"[$2]:$1\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_port\",\"__meta_kubernetes_pod_ip\"],\"target_label\":\"__address__\"},{\"action\":\"replace\",\"regex\":\"(\\\\d+);((([0-9]+?)(\\\\.|$)){4})\",\"replacement\":\"$2:$1\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_port\",\"__meta_kubernetes_pod_ip\"],\"target_label\":\"__address__\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\",\"replacement\":\"__param_$1\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_pod_label_(.+)\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_namespace\"],\"target_label\":\"namespace\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_pod_name\"],\"target_label\":\"pod\"},{\"action\":\"drop\",\"regex\":\"Pending|Succeeded|Failed|Completed\",\"source_labels\":[\"__meta_kubernetes_pod_phase\"]}]},{\"honor_labels\":true,\"job_name\":\"kubernetes-pods-slow\",\"kubernetes_sd_configs\":[{\"role\":\"pod\"}],\"relabel_configs\":[{\"action\":\"keep\",\"regex\":true,\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow\"]},{\"action\":\"replace\",\"regex\":\"(https?)\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_scheme\"],\"target_label\":\"__scheme__\"},{\"action\":\"replace\",\"regex\":\"(.+)\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_path\"],\"target_label\":\"__metrics_path__\"},{\"action\":\"replace\",\"regex\":\"(\\\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\",\"replacement\":\"[$2]:$1\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_port\",\"__meta_kubernetes_pod_ip\"],\"target_label\":\"__address__\"},{\"action\":\"replace\",\"regex\":\"(\\\\d+);((([0-9]+?)(\\\\.|$)){4})\",\"replacement\":\"$2:$1\",\"source_labels\":[\"__meta_kubernetes_pod_annotation_prometheus_io_port\",\"__meta_kubernetes_pod_ip\"],\"target_label\":\"__address__\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\",\"replacement\":\"__param_$1\"},{\"action\":\"labelmap\",\"regex\":\"__meta_kubernetes_pod_label_(.+)\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_namespace\"],\"target_label\":\"namespace\"},{\"action\":\"replace\",\"source_labels\":[\"__meta_kubernetes_pod_name\"],\"target_label\":\"pod\"},{\"action\":\"drop\",\"regex\":\"Pending|Succeeded|Failed|Completed\",\"source_labels\":[\"__meta_kubernetes_pod_phase\"]}],\"scrape_interval\":\"5m\",\"scrape_timeout\":\"30s\"}]},\"recording_rules.yml\":{},\"rules\":{}},\"serviceAccounts\":{\"server\":{\"annotations\":{},\"create\":true,\"name\":\"\"}}}",
                "version": "56.3.0"
              }
            ],
            "name": "prometheus",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "podSecurityPolicy.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "prometheusOperator.createCustomResource",
                "type": "",
                "value": "true"
              },
              {
                "name": "server.persistentVolume.enabled",
                "type": "",
                "value": "false"
              },
              {
                "name": "server\\.resources",
                "type": "",
                "value": "\"limits\":\n  \"cpu\": \"200m\"\n  \"memory\": \"50Mi\"\n\"requests\":\n  \"cpu\": \"100m\"\n  \"memory\": \"30Mi\"\n"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 2000,
            "upgrade_install": null,
            "values": [
              "rbac:\r\n  create: true\r\n\r\npodSecurityPolicy:\r\n  enabled: false\r\n\r\nimagePullSecrets: []\r\n# - name: \"image-pull-secret\"\r\n\r\n## Define serviceAccount names for components. Defaults to component's fully qualified name.\r\n##\r\nserviceAccounts:\r\n  server:\r\n    create: true\r\n    name: \"\"\r\n    annotations: {}\r\n\r\n## Monitors ConfigMap changes and POSTs to a URL\r\n## Ref: https://github.com/jimmidyson/configmap-reload\r\n##\r\nconfigmapReload:\r\n  prometheus:\r\n    ## If false, the configmap-reload container will not be deployed\r\n    ##\r\n    enabled: true\r\n\r\n    ## configmap-reload container name\r\n    ##\r\n    name: configmap-reload\r\n\r\n    ## configmap-reload container image\r\n    ##\r\n    image:\r\n      repository: jimmidyson/configmap-reload\r\n      tag: v0.8.0\r\n      # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).\r\n      digest: \"\"\r\n      pullPolicy: IfNotPresent\r\n\r\n    # containerPort: 9533\r\n\r\n    ## Additional configmap-reload container arguments\r\n    ##\r\n    extraArgs: {}\r\n    ## Additional configmap-reload volume directories\r\n    ##\r\n    extraVolumeDirs: []\r\n\r\n\r\n    ## Additional configmap-reload mounts\r\n    ##\r\n    extraConfigmapMounts: []\r\n      # - name: prometheus-alerts\r\n      #   mountPath: /etc/alerts.d\r\n      #   subPath: \"\"\r\n      #   configMap: prometheus-alerts\r\n      #   readOnly: true\r\n\r\n    ## Security context to be added to configmap-reload container\r\n    containerSecurityContext: {}\r\n\r\n    ## configmap-reload resource requests and limits\r\n    ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/\r\n    ##\r\n    resources: {}\r\n\r\nserver:\r\n  ## Prometheus server container name\r\n  ##\r\n  name: server\r\n\r\n  ## Use a ClusterRole (and ClusterRoleBinding)\r\n  ## - If set to false - we define a RoleBinding in the defined namespaces ONLY\r\n  ##\r\n  ## NB: because we need a Role with nonResourceURL's (\"/metrics\") - you must get someone with Cluster-admin privileges to define this role for you, before running with this setting enabled.\r\n  ##     This makes prometheus work - for users who do not have ClusterAdmin privs, but wants prometheus to operate on their own namespaces, instead of clusterwide.\r\n  ##\r\n  ## You MUST also set namespaces to the ones you have access to and want monitored by Prometheus.\r\n  ##\r\n  # useExistingClusterRoleName: nameofclusterrole\r\n\r\n  ## namespaces to monitor (instead of monitoring all - clusterwide). Needed if you want to run without Cluster-admin privileges.\r\n  # namespaces:\r\n  #   - yournamespace\r\n\r\n  # sidecarContainers - add more containers to prometheus server\r\n  # Key/Value where Key is the sidecar `- name: \u003cKey\u003e`\r\n  # Example:\r\n  #   sidecarContainers:\r\n  #      webserver:\r\n  #        image: nginx\r\n  sidecarContainers: {}\r\n\r\n  # sidecarTemplateValues - context to be used in template for sidecarContainers\r\n  # Example:\r\n  #   sidecarTemplateValues: *your-custom-globals\r\n  #   sidecarContainers:\r\n  #     webserver: |-\r\n  #       {{ include \"webserver-container-template\" . }}\r\n  # Template for `webserver-container-template` might looks like this:\r\n  #   image: \"{{ .Values.server.sidecarTemplateValues.repository }}:{{ .Values.server.sidecarTemplateValues.tag }}\"\r\n  #   ...\r\n  #\r\n  sidecarTemplateValues: {}\r\n\r\n  ## Prometheus server container image\r\n  ##\r\n  image:\r\n    repository: quay.io/prometheus/prometheus\r\n    # if not set appVersion field from Chart.yaml is used\r\n    tag: \"\"\r\n    # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).\r\n    digest: \"\"\r\n    pullPolicy: IfNotPresent\r\n\r\n  ## prometheus server priorityClassName\r\n  ##\r\n  priorityClassName: \"\"\r\n\r\n  ## EnableServiceLinks indicates whether information about services should be injected\r\n  ## into pod's environment variables, matching the syntax of Docker links.\r\n  ## WARNING: the field is unsupported and will be skipped in K8s prior to v1.13.0.\r\n  ##\r\n  enableServiceLinks: true\r\n\r\n  ## The URL prefix at which the container can be accessed. Useful in the case the '-web.external-url' includes a slug\r\n  ## so that the various internal URLs are still able to access as they are in the default case.\r\n  ## (Optional)\r\n  prefixURL: \"\"\r\n\r\n  ## External URL which can access prometheus\r\n  ## Maybe same with Ingress host name\r\n  baseURL: \"\"\r\n\r\n  ## Additional server container environment variables\r\n  ##\r\n  ## You specify this manually like you would a raw deployment manifest.\r\n  ## This means you can bind in environment variables from secrets.\r\n  ##\r\n  ## e.g. static environment variable:\r\n  ##  - name: DEMO_GREETING\r\n  ##    value: \"Hello from the environment\"\r\n  ##\r\n  ## e.g. secret environment variable:\r\n  ## - name: USERNAME\r\n  ##   valueFrom:\r\n  ##     secretKeyRef:\r\n  ##       name: mysecret\r\n  ##       key: username\r\n  env: []\r\n\r\n  # List of flags to override default parameters, e.g:\r\n  # - --enable-feature=agent\r\n  # - --storage.agent.retention.max-time=30m\r\n  defaultFlagsOverride: []\r\n\r\n  extraFlags:\r\n    - web.enable-lifecycle\r\n    ## web.enable-admin-api flag controls access to the administrative HTTP API which includes functionality such as\r\n    ## deleting time series. This is disabled by default.\r\n    # - web.enable-admin-api\r\n    ##\r\n    ## storage.tsdb.no-lockfile flag controls BD locking\r\n    # - storage.tsdb.no-lockfile\r\n    ##\r\n    ## storage.tsdb.wal-compression flag enables compression of the write-ahead log (WAL)\r\n    # - storage.tsdb.wal-compression\r\n\r\n  ## Path to a configuration file on prometheus server container FS\r\n  configPath: /etc/config/prometheus.yml\r\n\r\n  ### The data directory used by prometheus to set --storage.tsdb.path\r\n  ### When empty server.persistentVolume.mountPath is used instead\r\n  storagePath: \"\"\r\n\r\n  global:\r\n    ## How frequently to scrape targets by default\r\n    ##\r\n    scrape_interval: 1m\r\n    ## How long until a scrape request times out\r\n    ##\r\n    scrape_timeout: 10s\r\n    ## How frequently to evaluate rules\r\n    ##\r\n    evaluation_interval: 1m\r\n  ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write\r\n  ##\r\n  remoteWrite: []\r\n  ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_read\r\n  ##\r\n  remoteRead: []\r\n\r\n  ## Custom HTTP headers for Liveness/Readiness/Startup Probe\r\n  ##\r\n  ## Useful for providing HTTP Basic Auth to healthchecks\r\n  probeHeaders: []\r\n    # - name: \"Authorization\"\r\n    #   value: \"Bearer ABCDEabcde12345\"\r\n\r\n  ## Additional Prometheus server container arguments\r\n  ##\r\n  extraArgs: {}\r\n\r\n  ## Additional InitContainers to initialize the pod\r\n  ##\r\n  extraInitContainers: []\r\n\r\n  ## Additional Prometheus server Volume mounts\r\n  ##\r\n  extraVolumeMounts: []\r\n\r\n  ## Additional Prometheus server Volumes\r\n  ##\r\n  extraVolumes: []\r\n\r\n  ## Additional Prometheus server hostPath mounts\r\n  ##\r\n  extraHostPathMounts: []\r\n    # - name: certs-dir\r\n    #   mountPath: /etc/kubernetes/certs\r\n    #   subPath: \"\"\r\n    #   hostPath: /etc/kubernetes/certs\r\n    #   readOnly: true\r\n\r\n  extraConfigmapMounts: []\r\n    # - name: certs-configmap\r\n    #   mountPath: /prometheus\r\n    #   subPath: \"\"\r\n    #   configMap: certs-configmap\r\n    #   readOnly: true\r\n\r\n  ## Additional Prometheus server Secret mounts\r\n  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.\r\n  extraSecretMounts: []\r\n    # - name: secret-files\r\n    #   mountPath: /etc/secrets\r\n    #   subPath: \"\"\r\n    #   secretName: prom-secret-files\r\n    #   readOnly: true\r\n\r\n  ## ConfigMap override where fullname is {{.Release.Name}}-{{.Values.server.configMapOverrideName}}\r\n  ## Defining configMapOverrideName will cause templates/server-configmap.yaml\r\n  ## to NOT generate a ConfigMap resource\r\n  ##\r\n  configMapOverrideName: \"\"\r\n\r\n  ## Extra labels for Prometheus server ConfigMap (ConfigMap that holds serverFiles)\r\n  extraConfigmapLabels: {}\r\n\r\n  ingress:\r\n    ## If true, Prometheus server Ingress will be created\r\n    ##\r\n    enabled: false\r\n\r\n    # For Kubernetes \u003e= 1.18 you should specify the ingress-controller via the field ingressClassName\r\n    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress\r\n    # ingressClassName: nginx\r\n\r\n    ## Prometheus server Ingress annotations\r\n    ##\r\n    annotations: {}\r\n    #   kubernetes.io/ingress.class: nginx\r\n    #   kubernetes.io/tls-acme: 'true'\r\n\r\n    ## Prometheus server Ingress additional labels\r\n    ##\r\n    extraLabels: {}\r\n\r\n    ## Prometheus server Ingress hostnames with optional path\r\n    ## Must be provided if Ingress is enabled\r\n    ##\r\n    hosts: []\r\n    #   - prometheus.domain.com\r\n    #   - domain.com/prometheus\r\n\r\n    path: /\r\n\r\n    # pathType is only for k8s \u003e= 1.18\r\n    pathType: Prefix\r\n\r\n    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.\r\n    extraPaths: []\r\n    # - path: /*\r\n    #   backend:\r\n    #     serviceName: ssl-redirect\r\n    #     servicePort: use-annotation\r\n\r\n    ## Prometheus server Ingress TLS configuration\r\n    ## Secrets must be manually created in the namespace\r\n    ##\r\n    tls: []\r\n    #   - secretName: prometheus-server-tls\r\n    #     hosts:\r\n    #       - prometheus.domain.com\r\n\r\n  ## Server Deployment Strategy type\r\n  strategy:\r\n    type: Recreate\r\n\r\n  ## hostAliases allows adding entries to /etc/hosts inside the containers\r\n  hostAliases: []\r\n  #   - ip: \"127.0.0.1\"\r\n  #     hostnames:\r\n  #       - \"example.com\"\r\n\r\n  ## Node tolerations for server scheduling to nodes with taints\r\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\r\n  ##\r\n  tolerations: []\r\n    # - key: \"key\"\r\n    #   operator: \"Equal|Exists\"\r\n    #   value: \"value\"\r\n    #   effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\r\n\r\n  ## Node labels for Prometheus server pod assignment\r\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\r\n  ##\r\n  nodeSelector: {}\r\n\r\n  ## Pod affinity\r\n  ##\r\n  affinity: {}\r\n\r\n  ## PodDisruptionBudget settings\r\n  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/\r\n  ##\r\n  podDisruptionBudget:\r\n    enabled: false\r\n    maxUnavailable: 1\r\n\r\n  ## Use an alternate scheduler, e.g. \"stork\".\r\n  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\r\n  ##\r\n  # schedulerName:\r\n\r\n  persistentVolume:\r\n    ## If true, Prometheus server will create/use a Persistent Volume Claim\r\n    ## If false, use emptyDir\r\n    ##\r\n    enabled: true\r\n\r\n    ## Prometheus server data Persistent Volume access modes\r\n    ## Must match those of existing PV or dynamic provisioner\r\n    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/\r\n    ##\r\n    accessModes:\r\n      - ReadWriteOnce\r\n\r\n    ## Prometheus server data Persistent Volume labels\r\n    ##\r\n    labels: {}\r\n\r\n    ## Prometheus server data Persistent Volume annotations\r\n    ##\r\n    annotations: {}\r\n\r\n    ## Prometheus server data Persistent Volume existing claim name\r\n    ## Requires server.persistentVolume.enabled: true\r\n    ## If defined, PVC must be created manually before volume will be bound\r\n    existingClaim: \"\"\r\n\r\n    ## Prometheus server data Persistent Volume mount root path\r\n    ##\r\n    mountPath: /data\r\n\r\n    ## Prometheus server data Persistent Volume size\r\n    ##\r\n    size: 8Gi\r\n\r\n    ## Prometheus server data Persistent Volume Storage Class\r\n    ## If defined, storageClassName: \u003cstorageClass\u003e\r\n    ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\r\n    ## If undefined (the default) or set to null, no storageClassName spec is\r\n    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\r\n    ##   GKE, AWS \u0026 OpenStack)\r\n    ##\r\n    # storageClass: \"-\"\r\n\r\n    ## Prometheus server data Persistent Volume Binding Mode\r\n    ## If defined, volumeBindingMode: \u003cvolumeBindingMode\u003e\r\n    ## If undefined (the default) or set to null, no volumeBindingMode spec is\r\n    ##   set, choosing the default mode.\r\n    ##\r\n    # volumeBindingMode: \"\"\r\n\r\n    ## Subdirectory of Prometheus server data Persistent Volume to mount\r\n    ## Useful if the volume's root directory is not empty\r\n    ##\r\n    subPath: \"\"\r\n\r\n    ## Persistent Volume Claim Selector\r\n    ## Useful if Persistent Volumes have been provisioned in advance\r\n    ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector\r\n    ##\r\n    # selector:\r\n    #  matchLabels:\r\n    #    release: \"stable\"\r\n    #  matchExpressions:\r\n    #    - { key: environment, operator: In, values: [ dev ] }\r\n\r\n    ## Persistent Volume Name\r\n    ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one\r\n    ##\r\n    # volumeName: \"\"\r\n\r\n  emptyDir:\r\n    ## Prometheus server emptyDir volume size limit\r\n    ##\r\n    sizeLimit: \"\"\r\n\r\n  ## Annotations to be added to Prometheus server pods\r\n  ##\r\n  podAnnotations: {}\r\n    # iam.amazonaws.com/role: prometheus\r\n\r\n  ## Labels to be added to Prometheus server pods\r\n  ##\r\n  podLabels: {}\r\n\r\n  ## Prometheus AlertManager configuration\r\n  ##\r\n  alertmanagers: []\r\n\r\n  ## Specify if a Pod Security Policy for node-exporter must be created\r\n  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/\r\n  ##\r\n  podSecurityPolicy:\r\n    annotations: {}\r\n      ## Specify pod annotations\r\n      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor\r\n      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp\r\n      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl\r\n      ##\r\n      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'\r\n      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'\r\n      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'\r\n\r\n  ## Use a StatefulSet if replicaCount needs to be greater than 1 (see below)\r\n  ##\r\n  replicaCount: 1\r\n\r\n  ## Annotations to be added to deployment\r\n  ##\r\n  deploymentAnnotations: {}\r\n\r\n  statefulSet:\r\n    ## If true, use a statefulset instead of a deployment for pod management.\r\n    ## This allows to scale replicas to more than 1 pod\r\n    ##\r\n    enabled: false\r\n\r\n    annotations: {}\r\n    labels: {}\r\n    podManagementPolicy: OrderedReady\r\n\r\n    ## Alertmanager headless service to use for the statefulset\r\n    ##\r\n    headless:\r\n      annotations: {}\r\n      labels: {}\r\n      servicePort: 80\r\n      ## Enable gRPC port on service to allow auto discovery with thanos-querier\r\n      gRPC:\r\n        enabled: false\r\n        servicePort: 10901\r\n        # nodePort: 10901\r\n\r\n  ## Prometheus server readiness and liveness probe initial delay and timeout\r\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\r\n  ##\r\n  tcpSocketProbeEnabled: false\r\n  probeScheme: HTTP\r\n  readinessProbeInitialDelay: 30\r\n  readinessProbePeriodSeconds: 5\r\n  readinessProbeTimeout: 4\r\n  readinessProbeFailureThreshold: 3\r\n  readinessProbeSuccessThreshold: 1\r\n  livenessProbeInitialDelay: 30\r\n  livenessProbePeriodSeconds: 15\r\n  livenessProbeTimeout: 10\r\n  livenessProbeFailureThreshold: 3\r\n  livenessProbeSuccessThreshold: 1\r\n  startupProbe:\r\n    enabled: false\r\n    periodSeconds: 5\r\n    failureThreshold: 30\r\n    timeoutSeconds: 10\r\n\r\n  ## Prometheus server resource requests and limits\r\n  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/\r\n  ##\r\n  resources: {}\r\n    # limits:\r\n    #   cpu: 500m\r\n    #   memory: 512Mi\r\n    # requests:\r\n    #   cpu: 500m\r\n    #   memory: 512Mi\r\n\r\n  # Required for use in managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico),\r\n  # because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working\r\n  ##\r\n  hostNetwork: false\r\n\r\n  # When hostNetwork is enabled, this will set to ClusterFirstWithHostNet automatically\r\n  dnsPolicy: ClusterFirst\r\n\r\n  # Use hostPort\r\n  # hostPort: 9090\r\n\r\n  ## Vertical Pod Autoscaler config\r\n  ## Ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler\r\n  verticalAutoscaler:\r\n    ## If true a VPA object will be created for the controller (either StatefulSet or Deployemnt, based on above configs)\r\n    enabled: false\r\n    # updateMode: \"Auto\"\r\n    # containerPolicies:\r\n    # - containerName: 'prometheus-server'\r\n\r\n  # Custom DNS configuration to be added to prometheus server pods\r\n  dnsConfig: {}\r\n    # nameservers:\r\n    #   - 1.2.3.4\r\n    # searches:\r\n    #   - ns1.svc.cluster-domain.example\r\n    #   - my.dns.search.suffix\r\n    # options:\r\n    #   - name: ndots\r\n    #     value: \"2\"\r\n  #   - name: edns0\r\n\r\n  ## Security context to be added to server pods\r\n  ##\r\n  securityContext:\r\n    runAsUser: 65534\r\n    runAsNonRoot: true\r\n    runAsGroup: 65534\r\n    fsGroup: 65534\r\n\r\n  ## Security context to be added to server container\r\n  ##\r\n  containerSecurityContext: {}\r\n\r\n  service:\r\n    ## If false, no Service will be created for the Prometheus server\r\n    ##\r\n    enabled: true\r\n\r\n    annotations: {}\r\n    labels: {}\r\n    clusterIP: \"\"\r\n\r\n    ## List of IP addresses at which the Prometheus server service is available\r\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\r\n    ##\r\n    externalIPs: []\r\n\r\n    loadBalancerIP: \"\"\r\n    loadBalancerSourceRanges: []\r\n    servicePort: 80\r\n    sessionAffinity: None\r\n    type: ClusterIP\r\n\r\n    ## Enable gRPC port on service to allow auto discovery with thanos-querier\r\n    gRPC:\r\n      enabled: false\r\n      servicePort: 10901\r\n      # nodePort: 10901\r\n\r\n    ## If using a statefulSet (statefulSet.enabled=true), configure the\r\n    ## service to connect to a specific replica to have a consistent view\r\n    ## of the data.\r\n    statefulsetReplica:\r\n      enabled: false\r\n      replica: 0\r\n\r\n  ## Prometheus server pod termination grace period\r\n  ##\r\n  terminationGracePeriodSeconds: 300\r\n\r\n  ## Prometheus data retention period (default if not specified is 15 days)\r\n  ##\r\n  retention: \"15d\"\r\n\r\n## Prometheus server ConfigMap entries for rule files (allow prometheus labels interpolation)\r\nruleFiles: {}\r\n\r\n## Prometheus server ConfigMap entries\r\n##\r\nserverFiles:\r\n  ## Alerts configuration\r\n  ## Ref: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\r\n  alerting_rules.yml: {}\r\n  # groups:\r\n  #   - name: Instances\r\n  #     rules:\r\n  #       - alert: InstanceDown\r\n  #         expr: up == 0\r\n  #         for: 5m\r\n  #         labels:\r\n  #           severity: page\r\n  #         annotations:\r\n  #           description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.'\r\n  #           summary: 'Instance {{ $labels.instance }} down'\r\n  ## DEPRECATED DEFAULT VALUE, unless explicitly naming your files, please use alerting_rules.yml\r\n  alerts: {}\r\n\r\n  ## Records configuration\r\n  ## Ref: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/\r\n  recording_rules.yml: {}\r\n  ## DEPRECATED DEFAULT VALUE, unless explicitly naming your files, please use recording_rules.yml\r\n  rules: {}\r\n\r\n  prometheus.yml:\r\n    rule_files:\r\n      - /etc/config/recording_rules.yml\r\n      - /etc/config/alerting_rules.yml\r\n    ## Below two files are DEPRECATED will be removed from this default values file\r\n      - /etc/config/rules\r\n      - /etc/config/alerts\r\n\r\n    scrape_configs:\r\n      - job_name: prometheus\r\n        static_configs:\r\n          - targets:\r\n            - localhost:9090\r\n\r\n      # A scrape configuration for running Prometheus on a Kubernetes cluster.\r\n      # This uses separate scrape configs for cluster components (i.e. API server, node)\r\n      # and services to allow each to use different authentication configs.\r\n      #\r\n      # Kubernetes labels will be added as Prometheus labels on metrics via the\r\n      # `labelmap` relabeling action.\r\n\r\n      # Scrape config for API servers.\r\n      #\r\n      # Kubernetes exposes API servers as endpoints to the default/kubernetes\r\n      # service so this uses `endpoints` role and uses relabelling to only keep\r\n      # the endpoints associated with the default/kubernetes service using the\r\n      # default named port `https`. This works for single API server deployments as\r\n      # well as HA API server deployments.\r\n      - job_name: 'kubernetes-apiservers'\r\n\r\n        kubernetes_sd_configs:\r\n          - role: endpoints\r\n\r\n        # Default to scraping over https. If required, just disable this or change to\r\n        # `http`.\r\n        scheme: https\r\n\r\n        # This TLS \u0026 bearer token file config is used to connect to the actual scrape\r\n        # endpoints for cluster components. This is separate to discovery auth\r\n        # configuration because discovery \u0026 scraping are two separate concerns in\r\n        # Prometheus. The discovery auth config is automatic if Prometheus runs inside\r\n        # the cluster. Otherwise, more config options have to be provided within the\r\n        # \u003ckubernetes_sd_config\u003e.\r\n        tls_config:\r\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n          # If your node certificates are self-signed or use a different CA to the\r\n          # master CA, then disable certificate verification below. Note that\r\n          # certificate verification is an integral part of a secure infrastructure\r\n          # so this should only be disabled in a controlled environment. You can\r\n          # disable certificate verification by uncommenting the line below.\r\n          #\r\n          insecure_skip_verify: true\r\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n\r\n        # Keep only the default/kubernetes service endpoints for the https port. This\r\n        # will add targets for each API server which Kubernetes adds an endpoint to\r\n        # the default/kubernetes service.\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\r\n            action: keep\r\n            regex: default;kubernetes;https\r\n\r\n      - job_name: 'kubernetes-nodes'\r\n\r\n        # Default to scraping over https. If required, just disable this or change to\r\n        # `http`.\r\n        scheme: https\r\n\r\n        # This TLS \u0026 bearer token file config is used to connect to the actual scrape\r\n        # endpoints for cluster components. This is separate to discovery auth\r\n        # configuration because discovery \u0026 scraping are two separate concerns in\r\n        # Prometheus. The discovery auth config is automatic if Prometheus runs inside\r\n        # the cluster. Otherwise, more config options have to be provided within the\r\n        # \u003ckubernetes_sd_config\u003e.\r\n        tls_config:\r\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n          # If your node certificates are self-signed or use a different CA to the\r\n          # master CA, then disable certificate verification below. Note that\r\n          # certificate verification is an integral part of a secure infrastructure\r\n          # so this should only be disabled in a controlled environment. You can\r\n          # disable certificate verification by uncommenting the line below.\r\n          #\r\n          insecure_skip_verify: true\r\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n\r\n        kubernetes_sd_configs:\r\n          - role: node\r\n\r\n        relabel_configs:\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_node_label_(.+)\r\n          - target_label: __address__\r\n            replacement: kubernetes.default.svc:443\r\n          - source_labels: [__meta_kubernetes_node_name]\r\n            regex: (.+)\r\n            target_label: __metrics_path__\r\n            replacement: /api/v1/nodes/$1/proxy/metrics\r\n\r\n\r\n      - job_name: 'kubernetes-nodes-cadvisor'\r\n\r\n        # Default to scraping over https. If required, just disable this or change to\r\n        # `http`.\r\n        scheme: https\r\n\r\n        # This TLS \u0026 bearer token file config is used to connect to the actual scrape\r\n        # endpoints for cluster components. This is separate to discovery auth\r\n        # configuration because discovery \u0026 scraping are two separate concerns in\r\n        # Prometheus. The discovery auth config is automatic if Prometheus runs inside\r\n        # the cluster. Otherwise, more config options have to be provided within the\r\n        # \u003ckubernetes_sd_config\u003e.\r\n        tls_config:\r\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\r\n          # If your node certificates are self-signed or use a different CA to the\r\n          # master CA, then disable certificate verification below. Note that\r\n          # certificate verification is an integral part of a secure infrastructure\r\n          # so this should only be disabled in a controlled environment. You can\r\n          # disable certificate verification by uncommenting the line below.\r\n          #\r\n          insecure_skip_verify: true\r\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\r\n\r\n        kubernetes_sd_configs:\r\n          - role: node\r\n\r\n        # This configuration will work only on kubelet 1.7.3+\r\n        # As the scrape endpoints for cAdvisor have changed\r\n        # if you are using older version you need to change the replacement to\r\n        # replacement: /api/v1/nodes/$1:4194/proxy/metrics\r\n        # more info here https://github.com/coreos/prometheus-operator/issues/633\r\n        relabel_configs:\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_node_label_(.+)\r\n          - target_label: __address__\r\n            replacement: kubernetes.default.svc:443\r\n          - source_labels: [__meta_kubernetes_node_name]\r\n            regex: (.+)\r\n            target_label: __metrics_path__\r\n            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\r\n\r\n        # Metric relabel configs to apply to samples before ingestion.\r\n        # [Metric Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs)\r\n        # metric_relabel_configs:\r\n        # - action: labeldrop\r\n        #   regex: (kubernetes_io_hostname|failure_domain_beta_kubernetes_io_region|beta_kubernetes_io_os|beta_kubernetes_io_arch|beta_kubernetes_io_instance_type|failure_domain_beta_kubernetes_io_zone)\r\n\r\n      # Scrape config for service endpoints.\r\n      #\r\n      # The relabeling allows the actual service scrape endpoint to be configured\r\n      # via the following annotations:\r\n      #\r\n      # * `prometheus.io/scrape`: Only scrape services that have a value of\r\n      # `true`, except if `prometheus.io/scrape-slow` is set to `true` as well.\r\n      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n      # to set this to `https` \u0026 most likely set the `tls_config` of the scrape config.\r\n      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n      # * `prometheus.io/port`: If the metrics are exposed on a different port to the\r\n      # service then set this appropriately.\r\n      # * `prometheus.io/param_\u003cparameter\u003e`: If the metrics endpoint uses parameters\r\n      # then you can set any parameter\r\n      - job_name: 'kubernetes-service-endpoints'\r\n        honor_labels: true\r\n\r\n        kubernetes_sd_configs:\r\n          - role: endpoints\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\r\n            action: keep\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]\r\n            action: drop\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\r\n            action: replace\r\n            target_label: __scheme__\r\n            regex: (https?)\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\r\n            action: replace\r\n            target_label: __metrics_path__\r\n            regex: (.+)\r\n          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\r\n            action: replace\r\n            target_label: __address__\r\n            regex: (.+?)(?::\\d+)?;(\\d+)\r\n            replacement: $1:$2\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\r\n            replacement: __param_$1\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_service_label_(.+)\r\n          - source_labels: [__meta_kubernetes_namespace]\r\n            action: replace\r\n            target_label: namespace\r\n          - source_labels: [__meta_kubernetes_service_name]\r\n            action: replace\r\n            target_label: service\r\n          - source_labels: [__meta_kubernetes_pod_node_name]\r\n            action: replace\r\n            target_label: node\r\n\r\n      # Scrape config for slow service endpoints; same as above, but with a larger\r\n      # timeout and a larger interval\r\n      #\r\n      # The relabeling allows the actual service scrape endpoint to be configured\r\n      # via the following annotations:\r\n      #\r\n      # * `prometheus.io/scrape-slow`: Only scrape services that have a value of `true`\r\n      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n      # to set this to `https` \u0026 most likely set the `tls_config` of the scrape config.\r\n      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n      # * `prometheus.io/port`: If the metrics are exposed on a different port to the\r\n      # service then set this appropriately.\r\n      # * `prometheus.io/param_\u003cparameter\u003e`: If the metrics endpoint uses parameters\r\n      # then you can set any parameter\r\n      - job_name: 'kubernetes-service-endpoints-slow'\r\n        honor_labels: true\r\n\r\n        scrape_interval: 5m\r\n        scrape_timeout: 30s\r\n\r\n        kubernetes_sd_configs:\r\n          - role: endpoints\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]\r\n            action: keep\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\r\n            action: replace\r\n            target_label: __scheme__\r\n            regex: (https?)\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\r\n            action: replace\r\n            target_label: __metrics_path__\r\n            regex: (.+)\r\n          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\r\n            action: replace\r\n            target_label: __address__\r\n            regex: (.+?)(?::\\d+)?;(\\d+)\r\n            replacement: $1:$2\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\r\n            replacement: __param_$1\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_service_label_(.+)\r\n          - source_labels: [__meta_kubernetes_namespace]\r\n            action: replace\r\n            target_label: namespace\r\n          - source_labels: [__meta_kubernetes_service_name]\r\n            action: replace\r\n            target_label: service\r\n          - source_labels: [__meta_kubernetes_pod_node_name]\r\n            action: replace\r\n            target_label: node\r\n\r\n      - job_name: 'prometheus-pushgateway'\r\n        honor_labels: true\r\n\r\n        kubernetes_sd_configs:\r\n          - role: service\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\r\n            action: keep\r\n            regex: pushgateway\r\n\r\n      # Example scrape config for probing services via the Blackbox Exporter.\r\n      #\r\n      # The relabeling allows the actual service scrape endpoint to be configured\r\n      # via the following annotations:\r\n      #\r\n      # * `prometheus.io/probe`: Only probe services that have a value of `true`\r\n      - job_name: 'kubernetes-services'\r\n        honor_labels: true\r\n\r\n        metrics_path: /probe\r\n        params:\r\n          module: [http_2xx]\r\n\r\n        kubernetes_sd_configs:\r\n          - role: service\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\r\n            action: keep\r\n            regex: true\r\n          - source_labels: [__address__]\r\n            target_label: __param_target\r\n          - target_label: __address__\r\n            replacement: blackbox\r\n          - source_labels: [__param_target]\r\n            target_label: instance\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_service_label_(.+)\r\n          - source_labels: [__meta_kubernetes_namespace]\r\n            target_label: namespace\r\n          - source_labels: [__meta_kubernetes_service_name]\r\n            target_label: service\r\n\r\n      # Example scrape config for pods\r\n      #\r\n      # The relabeling allows the actual pod scrape endpoint to be configured via the\r\n      # following annotations:\r\n      #\r\n      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`,\r\n      # except if `prometheus.io/scrape-slow` is set to `true` as well.\r\n      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n      # to set this to `https` \u0026 most likely set the `tls_config` of the scrape config.\r\n      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.\r\n      - job_name: 'kubernetes-pods'\r\n        honor_labels: true\r\n\r\n        kubernetes_sd_configs:\r\n          - role: pod\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\r\n            action: keep\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]\r\n            action: drop\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\r\n            action: replace\r\n            regex: (https?)\r\n            target_label: __scheme__\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\r\n            action: replace\r\n            target_label: __metrics_path__\r\n            regex: (.+)\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]\r\n            action: replace\r\n            regex: (\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\r\n            replacement: '[$2]:$1'\r\n            target_label: __address__\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]\r\n            action: replace\r\n            regex: (\\d+);((([0-9]+?)(\\.|$)){4})\r\n            replacement: $2:$1\r\n            target_label: __address__\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\r\n            replacement: __param_$1\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_pod_label_(.+)\r\n          - source_labels: [__meta_kubernetes_namespace]\r\n            action: replace\r\n            target_label: namespace\r\n          - source_labels: [__meta_kubernetes_pod_name]\r\n            action: replace\r\n            target_label: pod\r\n          - source_labels: [__meta_kubernetes_pod_phase]\r\n            regex: Pending|Succeeded|Failed|Completed\r\n            action: drop\r\n\r\n      # Example Scrape config for pods which should be scraped slower. An useful example\r\n      # would be stackriver-exporter which queries an API on every scrape of the pod\r\n      #\r\n      # The relabeling allows the actual pod scrape endpoint to be configured via the\r\n      # following annotations:\r\n      #\r\n      # * `prometheus.io/scrape-slow`: Only scrape pods that have a value of `true`\r\n      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\r\n      # to set this to `https` \u0026 most likely set the `tls_config` of the scrape config.\r\n      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\r\n      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.\r\n      - job_name: 'kubernetes-pods-slow'\r\n        honor_labels: true\r\n\r\n        scrape_interval: 5m\r\n        scrape_timeout: 30s\r\n\r\n        kubernetes_sd_configs:\r\n          - role: pod\r\n\r\n        relabel_configs:\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]\r\n            action: keep\r\n            regex: true\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\r\n            action: replace\r\n            regex: (https?)\r\n            target_label: __scheme__\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\r\n            action: replace\r\n            target_label: __metrics_path__\r\n            regex: (.+)\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]\r\n            action: replace\r\n            regex: (\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\r\n            replacement: '[$2]:$1'\r\n            target_label: __address__\r\n          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]\r\n            action: replace\r\n            regex: (\\d+);((([0-9]+?)(\\.|$)){4})\r\n            replacement: $2:$1\r\n            target_label: __address__\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\r\n            replacement: __param_$1\r\n          - action: labelmap\r\n            regex: __meta_kubernetes_pod_label_(.+)\r\n          - source_labels: [__meta_kubernetes_namespace]\r\n            action: replace\r\n            target_label: namespace\r\n          - source_labels: [__meta_kubernetes_pod_name]\r\n            action: replace\r\n            target_label: pod\r\n          - source_labels: [__meta_kubernetes_pod_phase]\r\n            regex: Pending|Succeeded|Failed|Completed\r\n            action: drop\r\n\r\n# adds additional scrape configs to prometheus.yml\r\n# must be a string so you have to add a | after extraScrapeConfigs:\r\n# example adds prometheus-blackbox-exporter scrape config\r\nextraScrapeConfigs: \"\"\r\n  # - job_name: 'prometheus-blackbox-exporter'\r\n  #   metrics_path: /probe\r\n  #   params:\r\n  #     module: [http_2xx]\r\n  #   static_configs:\r\n  #     - targets:\r\n  #       - https://example.com\r\n  #   relabel_configs:\r\n  #     - source_labels: [__address__]\r\n  #       target_label: __param_target\r\n  #     - source_labels: [__param_target]\r\n  #       target_label: instance\r\n  #     - target_label: __address__\r\n  #       replacement: prometheus-blackbox-exporter:9115\r\n\r\n# Adds option to add alert_relabel_configs to avoid duplicate alerts in alertmanager\r\n# useful in H/A prometheus with different external labels but the same alerts\r\nalertRelabelConfigs: {}\r\n  # alert_relabel_configs:\r\n  # - source_labels: [dc]\r\n  #   regex: (.+)\\d+\r\n  #   target_label: dc\r\n\r\nnetworkPolicy:\r\n  ## Enable creation of NetworkPolicy resources.\r\n  ##\r\n  enabled: false\r\n\r\n# Force namespace of namespaced resources\r\nforceNamespace: \"\"\r\n\r\n# Extra manifests to deploy as an array\r\nextraManifests: []\r\n  # - apiVersion: v1\r\n  #   kind: ConfigMap\r\n  #   metadata:\r\n  #   labels:\r\n  #     name: prometheus-extra\r\n  #   data:\r\n  #     extra-data: \"value\"\r\n\r\n# Configuration of subcharts defined in Chart.yaml\r\n\r\n## alertmanager sub-chart configurable values\r\n## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/alertmanager\r\n##\r\nalertmanager:\r\n  ## If false, alertmanager will not be installed\r\n  ##\r\n  enabled: true\r\n\r\n  persistence:\r\n    size: 2Gi\r\n\r\n  podSecurityContext:\r\n    runAsUser: 65534\r\n    runAsNonRoot: true\r\n    runAsGroup: 65534\r\n    fsGroup: 65534\r\n\r\n## kube-state-metrics sub-chart configurable values\r\n## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics\r\n##\r\nkube-state-metrics:\r\n  ## If false, kube-state-metrics sub-chart will not be installed\r\n  ##\r\n  enabled: true\r\n\r\n## promtheus-node-exporter sub-chart configurable values\r\n## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-node-exporter\r\n##\r\nprometheus-node-exporter:\r\n  ## If false, node-exporter will not be installed\r\n  ##\r\n  enabled: true\r\n\r\n  rbac:\r\n    pspEnabled: false\r\n\r\n  containerSecurityContext:\r\n    allowPrivilegeEscalation: false\r\n\r\n## pprometheus-pushgateway sub-chart configurable values\r\n## Please see https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-pushgateway\r\n##\r\nprometheus-pushgateway:\r\n  ## If false, pushgateway will not be installed\r\n  ##\r\n  enabled: true\r\n\r\n  # Optional service annotations\r\n  serviceAnnotations:\r\n    prometheus.io/probe: pushgateway"
            ],
            "verify": false,
            "version": "56.3.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "ns-website-db/postgres",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": null,
                "name": "postgres",
                "namespace": "ns-website-db",
                "resource_version": "2171",
                "uid": "74df71ca-8714-4880-922d-dca6ce5e3bbf"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "1",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "postgres"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "postgres"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [
                              {
                                "name": "POSTGRES_DB",
                                "value": "my_database",
                                "value_from": []
                              },
                              {
                                "name": "POSTGRES_USER",
                                "value": "db_user",
                                "value_from": []
                              },
                              {
                                "name": "POSTGRES_PASSWORD",
                                "value": "mypassword",
                                "value_from": []
                              },
                              {
                                "name": "PGDATA",
                                "value": "/var/lib/postgresql/data/pgdata",
                                "value_from": []
                              }
                            ],
                            "env_from": [],
                            "image": "postgres:16",
                            "image_pull_policy": "IfNotPresent",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "postgres",
                            "port": [
                              {
                                "container_port": 5432,
                                "host_ip": "",
                                "host_port": 0,
                                "name": "",
                                "protocol": "TCP"
                              }
                            ],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [
                              {
                                "mount_path": "/var/lib/postgresql/data",
                                "mount_propagation": "None",
                                "name": "postgres-storage",
                                "read_only": false,
                                "sub_path": ""
                              }
                            ],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": [
                          {
                            "aws_elastic_block_store": [],
                            "azure_disk": [],
                            "azure_file": [],
                            "ceph_fs": [],
                            "cinder": [],
                            "config_map": [],
                            "csi": [],
                            "downward_api": [],
                            "empty_dir": [],
                            "ephemeral": [],
                            "fc": [],
                            "flex_volume": [],
                            "flocker": [],
                            "gce_persistent_disk": [],
                            "git_repo": [],
                            "glusterfs": [],
                            "host_path": [],
                            "iscsi": [],
                            "local": [],
                            "name": "postgres-storage",
                            "nfs": [],
                            "persistent_volume_claim": [
                              {
                                "claim_name": "postgres-pvc",
                                "read_only": false
                              }
                            ],
                            "photon_persistent_disk": [],
                            "projected": [],
                            "quobyte": [],
                            "rbd": [],
                            "secret": [],
                            "vsphere_volume": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "spec"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "template"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "spec"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "container"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "env"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "value"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2",
            "kubernetes_persistent_volume_claim.postgres_pvc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_deployment",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "ns-website-db/website",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 1,
                "labels": null,
                "name": "website",
                "namespace": "ns-website-db",
                "resource_version": "1838",
                "uid": "66a24537-e14c-47ce-96d0-6dcf34e8f2ac"
              }
            ],
            "spec": [
              {
                "min_ready_seconds": 0,
                "paused": false,
                "progress_deadline_seconds": 600,
                "replicas": "1",
                "revision_history_limit": 10,
                "selector": [
                  {
                    "match_expressions": [],
                    "match_labels": {
                      "app": "website"
                    }
                  }
                ],
                "strategy": [
                  {
                    "rolling_update": [
                      {
                        "max_surge": "25%",
                        "max_unavailable": "25%"
                      }
                    ],
                    "type": "RollingUpdate"
                  }
                ],
                "template": [
                  {
                    "metadata": [
                      {
                        "annotations": null,
                        "generate_name": "",
                        "generation": 0,
                        "labels": {
                          "app": "website"
                        },
                        "name": "",
                        "namespace": "",
                        "resource_version": "",
                        "uid": ""
                      }
                    ],
                    "spec": [
                      {
                        "active_deadline_seconds": 0,
                        "affinity": [],
                        "automount_service_account_token": true,
                        "container": [
                          {
                            "args": null,
                            "command": null,
                            "env": [
                              {
                                "name": "DATABASE_URL",
                                "value": "postgresql://db_user:mypassword@postgres.ns-website-db.svc.cluster.local:5432/my_database",
                                "value_from": []
                              }
                            ],
                            "env_from": [],
                            "image": "registry.digitalocean.com/devops-cicd/fast-api:latest",
                            "image_pull_policy": "Always",
                            "lifecycle": [],
                            "liveness_probe": [],
                            "name": "website",
                            "port": [
                              {
                                "container_port": 8000,
                                "host_ip": "",
                                "host_port": 0,
                                "name": "",
                                "protocol": "TCP"
                              }
                            ],
                            "readiness_probe": [],
                            "resources": [
                              {
                                "limits": {},
                                "requests": {}
                              }
                            ],
                            "security_context": [],
                            "startup_probe": [],
                            "stdin": false,
                            "stdin_once": false,
                            "termination_message_path": "/dev/termination-log",
                            "termination_message_policy": "File",
                            "tty": false,
                            "volume_device": [],
                            "volume_mount": [],
                            "working_dir": ""
                          }
                        ],
                        "dns_config": [],
                        "dns_policy": "ClusterFirst",
                        "enable_service_links": true,
                        "host_aliases": [],
                        "host_ipc": false,
                        "host_network": false,
                        "host_pid": false,
                        "hostname": "",
                        "image_pull_secrets": [
                          {
                            "name": "do-secret"
                          },
                          {
                            "name": "do-secret"
                          }
                        ],
                        "init_container": [],
                        "node_name": "",
                        "node_selector": null,
                        "os": [],
                        "priority_class_name": "",
                        "readiness_gate": [],
                        "restart_policy": "Always",
                        "runtime_class_name": "",
                        "scheduler_name": "default-scheduler",
                        "security_context": [],
                        "service_account_name": "",
                        "share_process_namespace": false,
                        "subdomain": "",
                        "termination_grace_period_seconds": 30,
                        "toleration": [],
                        "topology_spread_constraint": [],
                        "volume": []
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_rollout": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "spec"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "template"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "spec"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "container"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "env"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "value"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2",
            "kubernetes_namespace.namespace_creation",
            "kubernetes_secret.do_secret"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "monitoring",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "monitoring",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "monitoring",
                "resource_version": "1659",
                "uid": "cd8056b5-fd4a-401c-9298-926077c77939"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "namespace_creation",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "ns-website-db",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "ns-website-db",
                "resource_version": "1658",
                "uid": "3287f572-5956-442d-a215-78b5741d95e8"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_persistent_volume_claim",
      "name": "postgres_pvc",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "ns-website-db/postgres-pvc",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "postgres-pvc",
                "namespace": "ns-website-db",
                "resource_version": "1706",
                "uid": "81910b10-d0e2-4b66-ad14-b8bc46f1de24"
              }
            ],
            "spec": [
              {
                "access_modes": [
                  "ReadWriteOnce"
                ],
                "resources": [
                  {
                    "limits": null,
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                ],
                "selector": [],
                "storage_class_name": "do-block-storage",
                "volume_mode": "Filesystem",
                "volume_name": "pvc-81910b10-d0e2-4b66-ad14-b8bc46f1de24"
              }
            ],
            "timeouts": null,
            "wait_until_bound": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "do_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              ".dockerconfigjson": "{\"auths\":{\"registry.digitalocean.com\":{\"email\":\"fvaneknovi@gmail.com\",\"password\":\"dop_v1_6358076aac284cf8f72e32107602edd647a70f7ce3429535b4874836f599f11f\",\"username\":\"fransvanek\"}}}"
            },
            "id": "ns-website-db/do-secret",
            "immutable": false,
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "do-secret",
                "namespace": "ns-website-db",
                "resource_version": "1664",
                "uid": "d130be7e-bd26-48cb-89d5-e8a75a3c9858"
              }
            ],
            "timeouts": null,
            "type": "kubernetes.io/dockerconfigjson",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "binary_data"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "data"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "data"
              },
              {
                "type": "index",
                "value": {
                  "value": ".dockerconfigjson",
                  "type": "string"
                }
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2",
            "kubernetes_namespace.namespace_creation"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "ns-website-db/postgres",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "postgres",
                "namespace": "ns-website-db",
                "resource_version": "1667",
                "uid": "03e6a43d-7020-4a2a-aaed-c5278721d7ee"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.245.163.152",
                "cluster_ips": [
                  "10.245.163.152"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "",
                    "node_port": 0,
                    "port": 5432,
                    "protocol": "TCP",
                    "target_port": "5432"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "postgres"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "ClusterIP"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "ns-website-db/website",
            "metadata": [
              {
                "annotations": {
                  "kubernetes.digitalocean.com/load-balancer-id": "b36019db-51c3-4bcf-ba1e-3c132a051751"
                },
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "website",
                "namespace": "ns-website-db",
                "resource_version": "2786",
                "uid": "3b85c43c-3abf-497e-aec4-70c4a7ad51cd"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.245.175.226",
                "cluster_ips": [
                  "10.245.175.226"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "",
                    "node_port": 31061,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "8000"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "website"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "LoadBalancer"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": [
                      {
                        "hostname": "",
                        "ip": "134.209.139.17"
                      }
                    ]
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "digitalocean_kubernetes_cluster.my-devops-cluster2"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
